# Задача №51. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: Вывод:
# values = [0, 2, 10, 6] same
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)


# 1 вариант решения задачи
# def same_by(characteristic, objects): #сделалифункцию которая на вход принимает два аргумента характеристики и объекты.
#     #характеристика это фукнция, которая применется ко всем объектам объектс
#     for i in range(len(objects) - 1): #проходимся по индексам сравнивая ээлемент по данному индексу и следующему
#         #чтобы он не выскочил за пределы прописываем лен -1
#         if characteristic (objects[i]) != characteristic (objects[i + 1]): #перебираем отличия характеристик
#             return False
#         return True #если где-то не равно, он вернет тру и прекратит работу и неравенство нигде не встретиться, вернут тру


# values = [1, 2, 10, 6]

# if same_by(lambda x: isinstance(x, int), values): #проверка на инт - изинстанс проверяет
#     print('same')
# else:
#     print('different')


# 2 вариант решения задачи

def same_by(func, collection): #функция сейм бай вызывает фукнцию
    return len(list(filter(func, collection))) == 0 #флтр в котором мы проверяем все значения коллекшн которое делится на два 
#те, которые делятся на 2 мы записываем в список

values = [0, 2, 10, 6, 8, 12, 24, 4]
if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')